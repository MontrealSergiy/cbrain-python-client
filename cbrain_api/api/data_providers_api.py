# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cbrain_api.api_client import ApiClient


class DataProvidersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_providers_get(self, **kwargs):  # noqa: E501
        """Get a list of the Data Providers available to the current user.  # noqa: E501

        This method returns a list of Data Provider objects that represent servers with disk space accessible for storing Userfiles.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number when paginating. See also the per_page parameter
        :param int per_page: Size of each page when paginating. See also the page parameter
        :return: list[DataProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_providers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_providers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_providers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of the Data Providers available to the current user.  # noqa: E501

        This method returns a list of Data Provider objects that represent servers with disk space accessible for storing Userfiles.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number when paginating. See also the per_page parameter
        :param int per_page: Size of each page when paginating. See also the page parameter
        :return: list[DataProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_providers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BrainPortalSession']  # noqa: E501

        return self.api_client.call_api(
            '/data_providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataProvider]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_providers_id_browse_get(self, id, **kwargs):  # noqa: E501
        """List the files on a Data Provider.  # noqa: E501

        This method allows the inspection of what files are present on a Data Provider specified by the ID parameter. Files that are not yet registered as Userfiles are visible using this method, as well as regularly accessible Userfiles.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_browse_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to browse. (required)
        :return: list[FileInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_providers_id_browse_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_providers_id_browse_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def data_providers_id_browse_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the files on a Data Provider.  # noqa: E501

        This method allows the inspection of what files are present on a Data Provider specified by the ID parameter. Files that are not yet registered as Userfiles are visible using this method, as well as regularly accessible Userfiles.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_browse_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to browse. (required)
        :return: list[FileInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_providers_id_browse_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `data_providers_id_browse_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BrainPortalSession']  # noqa: E501

        return self.api_client.call_api(
            '/data_providers/{id}/browse', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_providers_id_delete_post(self, id, multi_registration_mod_req, **kwargs):  # noqa: E501
        """Deletes unregistered files from a CBRAIN Data provider.  # noqa: E501

        This method allows files that have not been registered from CBRAIN to be deleted. This may be necessary if files were uploaded in error, or if they were unregistered but not immediately deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_delete_post(id, multi_registration_mod_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to delete files from. (required)
        :param MultiRegistrationModReq multi_registration_mod_req: Arrays containing the files to delete. (required)
        :return: RegistrationInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_providers_id_delete_post_with_http_info(id, multi_registration_mod_req, **kwargs)  # noqa: E501
        else:
            (data) = self.data_providers_id_delete_post_with_http_info(id, multi_registration_mod_req, **kwargs)  # noqa: E501
            return data

    def data_providers_id_delete_post_with_http_info(self, id, multi_registration_mod_req, **kwargs):  # noqa: E501
        """Deletes unregistered files from a CBRAIN Data provider.  # noqa: E501

        This method allows files that have not been registered from CBRAIN to be deleted. This may be necessary if files were uploaded in error, or if they were unregistered but not immediately deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_delete_post_with_http_info(id, multi_registration_mod_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to delete files from. (required)
        :param MultiRegistrationModReq multi_registration_mod_req: Arrays containing the files to delete. (required)
        :return: RegistrationInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'multi_registration_mod_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_providers_id_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `data_providers_id_delete_post`")  # noqa: E501
        # verify the required parameter 'multi_registration_mod_req' is set
        if self.api_client.client_side_validation and ('multi_registration_mod_req' not in params or
                                                       params['multi_registration_mod_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `multi_registration_mod_req` when calling `data_providers_id_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'multi_registration_mod_req' in params:
            body_params = params['multi_registration_mod_req']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BrainPortalSession']  # noqa: E501

        return self.api_client.call_api(
            '/data_providers/{id}/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_providers_id_get(self, id, **kwargs):  # noqa: E501
        """Get information on a particular Data Provider.  # noqa: E501

        This method returns a single Data Provider specified by the ID parameter   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the Data Provider to get information on. (required)
        :return: DataProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_providers_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_providers_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def data_providers_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get information on a particular Data Provider.  # noqa: E501

        This method returns a single Data Provider specified by the ID parameter   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the Data Provider to get information on. (required)
        :return: DataProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_providers_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `data_providers_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BrainPortalSession']  # noqa: E501

        return self.api_client.call_api(
            '/data_providers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_providers_id_is_alive_get(self, id, **kwargs):  # noqa: E501
        """Pings a Data Provider to check if it is running.  # noqa: E501

        This method allows the querying of a Data Provider specified by the ID parameter to see if it is running or not.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_is_alive_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to query. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_providers_id_is_alive_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_providers_id_is_alive_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def data_providers_id_is_alive_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Pings a Data Provider to check if it is running.  # noqa: E501

        This method allows the querying of a Data Provider specified by the ID parameter to see if it is running or not.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_is_alive_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to query. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_providers_id_is_alive_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `data_providers_id_is_alive_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BrainPortalSession']  # noqa: E501

        return self.api_client.call_api(
            '/data_providers/{id}/is_alive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_providers_id_register_post(self, id, multi_registration_mod_req, **kwargs):  # noqa: E501
        """Registers a file as a Userfile in CBRAIN.  # noqa: E501

        This method allows new files to be added to CBRAIN. The files must first be transfered to the Data Provider via SFTP. For more information on SFTP file transfers, consult the CBRAIN Wiki documentation. Once files are present on the Data Provider, this method registers them in CBRAIN by specifying the file type. You can also specify to copy/move the files to another Data Provider after file registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_register_post(id, multi_registration_mod_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to register files on. (required)
        :param MultiRegistrationModReq multi_registration_mod_req: Arrays containing the filenames and types to register. (required)
        :return: RegistrationInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_providers_id_register_post_with_http_info(id, multi_registration_mod_req, **kwargs)  # noqa: E501
        else:
            (data) = self.data_providers_id_register_post_with_http_info(id, multi_registration_mod_req, **kwargs)  # noqa: E501
            return data

    def data_providers_id_register_post_with_http_info(self, id, multi_registration_mod_req, **kwargs):  # noqa: E501
        """Registers a file as a Userfile in CBRAIN.  # noqa: E501

        This method allows new files to be added to CBRAIN. The files must first be transfered to the Data Provider via SFTP. For more information on SFTP file transfers, consult the CBRAIN Wiki documentation. Once files are present on the Data Provider, this method registers them in CBRAIN by specifying the file type. You can also specify to copy/move the files to another Data Provider after file registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_register_post_with_http_info(id, multi_registration_mod_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to register files on. (required)
        :param MultiRegistrationModReq multi_registration_mod_req: Arrays containing the filenames and types to register. (required)
        :return: RegistrationInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'multi_registration_mod_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_providers_id_register_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `data_providers_id_register_post`")  # noqa: E501
        # verify the required parameter 'multi_registration_mod_req' is set
        if self.api_client.client_side_validation and ('multi_registration_mod_req' not in params or
                                                       params['multi_registration_mod_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `multi_registration_mod_req` when calling `data_providers_id_register_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'multi_registration_mod_req' in params:
            body_params = params['multi_registration_mod_req']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BrainPortalSession']  # noqa: E501

        return self.api_client.call_api(
            '/data_providers/{id}/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_providers_id_unregister_post(self, id, multi_registration_mod_req, **kwargs):  # noqa: E501
        """Unregisters files as Userfile in CBRAIN.  # noqa: E501

        This method allows files to be unregistered from CBRAIN. This will not delete the files, but removes them from the CBRAIN database, so Tools may no longer be run on them.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_unregister_post(id, multi_registration_mod_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to unregister files from. (required)
        :param MultiRegistrationModReq multi_registration_mod_req: Arrays containing the filenames to unregister. (required)
        :return: RegistrationInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_providers_id_unregister_post_with_http_info(id, multi_registration_mod_req, **kwargs)  # noqa: E501
        else:
            (data) = self.data_providers_id_unregister_post_with_http_info(id, multi_registration_mod_req, **kwargs)  # noqa: E501
            return data

    def data_providers_id_unregister_post_with_http_info(self, id, multi_registration_mod_req, **kwargs):  # noqa: E501
        """Unregisters files as Userfile in CBRAIN.  # noqa: E501

        This method allows files to be unregistered from CBRAIN. This will not delete the files, but removes them from the CBRAIN database, so Tools may no longer be run on them.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_providers_id_unregister_post_with_http_info(id, multi_registration_mod_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the Data Provider to unregister files from. (required)
        :param MultiRegistrationModReq multi_registration_mod_req: Arrays containing the filenames to unregister. (required)
        :return: RegistrationInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'multi_registration_mod_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_providers_id_unregister_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `data_providers_id_unregister_post`")  # noqa: E501
        # verify the required parameter 'multi_registration_mod_req' is set
        if self.api_client.client_side_validation and ('multi_registration_mod_req' not in params or
                                                       params['multi_registration_mod_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `multi_registration_mod_req` when calling `data_providers_id_unregister_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'multi_registration_mod_req' in params:
            body_params = params['multi_registration_mod_req']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BrainPortalSession']  # noqa: E501

        return self.api_client.call_api(
            '/data_providers/{id}/unregister', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
