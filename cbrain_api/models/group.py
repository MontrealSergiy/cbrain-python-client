# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cbrain_api.configuration import Configuration


class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'site_id': 'int',
        'creator_id': 'int',
        'invisible': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'site_id': 'site_id',
        'creator_id': 'creator_id',
        'invisible': 'invisible'
    }

    def __init__(self, id=None, name=None, description=None, type=None, site_id=None, creator_id=None, invisible=None, _configuration=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._site_id = None
        self._creator_id = None
        self._invisible = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if site_id is not None:
            self.site_id = site_id
        if creator_id is not None:
            self.creator_id = creator_id
        if invisible is not None:
            self.invisible = invisible

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501

        ID number of the group.  # noqa: E501

        :return: The id of this Group.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        ID number of the group.  # noqa: E501

        :param id: The id of this Group.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501

        Name of the group.  # noqa: E501

        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Name of the group.  # noqa: E501

        :param name: The name of this Group.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Group.  # noqa: E501

        Description of the group.  # noqa: E501

        :return: The description of this Group.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.

        Description of the group.  # noqa: E501

        :param description: The description of this Group.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Group.  # noqa: E501

        Type of group.  # noqa: E501

        :return: The type of this Group.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Group.

        Type of group.  # noqa: E501

        :param type: The type of this Group.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def site_id(self):
        """Gets the site_id of this Group.  # noqa: E501

        ID of the site associated with the group.  # noqa: E501

        :return: The site_id of this Group.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Group.

        ID of the site associated with the group.  # noqa: E501

        :param site_id: The site_id of this Group.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def creator_id(self):
        """Gets the creator_id of this Group.  # noqa: E501

        ID of the User who created the group.   # noqa: E501

        :return: The creator_id of this Group.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this Group.

        ID of the User who created the group.   # noqa: E501

        :param creator_id: The creator_id of this Group.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def invisible(self):
        """Gets the invisible of this Group.  # noqa: E501

        Specifies whether or not the group is visible to Normal Users. Invisible groups exist to specify levels of access to Userfiles, DataProviders and Bourreaux.   # noqa: E501

        :return: The invisible of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._invisible

    @invisible.setter
    def invisible(self, invisible):
        """Sets the invisible of this Group.

        Specifies whether or not the group is visible to Normal Users. Invisible groups exist to specify levels of access to Userfiles, DataProviders and Bourreaux.   # noqa: E501

        :param invisible: The invisible of this Group.  # noqa: E501
        :type: bool
        """

        self._invisible = invisible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Group):
            return True

        return self.to_dict() != other.to_dict()
