# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cbrain_api.configuration import Configuration


class MultiUserfilesModReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_ids': 'list[str]',
        'data_provider_id_for_mv_cp': 'int',
        'specified_filename': 'str',
        'operation': 'str'
    }

    attribute_map = {
        'file_ids': 'file_ids',
        'data_provider_id_for_mv_cp': 'data_provider_id_for_mv_cp',
        'specified_filename': 'specified_filename',
        'operation': 'operation'
    }

    def __init__(self, file_ids=None, data_provider_id_for_mv_cp=None, specified_filename=None, operation=None, _configuration=None):  # noqa: E501
        """MultiUserfilesModReq - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._file_ids = None
        self._data_provider_id_for_mv_cp = None
        self._specified_filename = None
        self._operation = None
        self.discriminator = None

        if file_ids is not None:
            self.file_ids = file_ids
        if data_provider_id_for_mv_cp is not None:
            self.data_provider_id_for_mv_cp = data_provider_id_for_mv_cp
        if specified_filename is not None:
            self.specified_filename = specified_filename
        if operation is not None:
            self.operation = operation

    @property
    def file_ids(self):
        """Gets the file_ids of this MultiUserfilesModReq.  # noqa: E501


        :return: The file_ids of this MultiUserfilesModReq.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this MultiUserfilesModReq.


        :param file_ids: The file_ids of this MultiUserfilesModReq.  # noqa: E501
        :type: list[str]
        """

        self._file_ids = file_ids

    @property
    def data_provider_id_for_mv_cp(self):
        """Gets the data_provider_id_for_mv_cp of this MultiUserfilesModReq.  # noqa: E501


        :return: The data_provider_id_for_mv_cp of this MultiUserfilesModReq.  # noqa: E501
        :rtype: int
        """
        return self._data_provider_id_for_mv_cp

    @data_provider_id_for_mv_cp.setter
    def data_provider_id_for_mv_cp(self, data_provider_id_for_mv_cp):
        """Sets the data_provider_id_for_mv_cp of this MultiUserfilesModReq.


        :param data_provider_id_for_mv_cp: The data_provider_id_for_mv_cp of this MultiUserfilesModReq.  # noqa: E501
        :type: int
        """

        self._data_provider_id_for_mv_cp = data_provider_id_for_mv_cp

    @property
    def specified_filename(self):
        """Gets the specified_filename of this MultiUserfilesModReq.  # noqa: E501

        The name of the archive file that the Userfiles will be compressed into when downloading.  # noqa: E501

        :return: The specified_filename of this MultiUserfilesModReq.  # noqa: E501
        :rtype: str
        """
        return self._specified_filename

    @specified_filename.setter
    def specified_filename(self, specified_filename):
        """Sets the specified_filename of this MultiUserfilesModReq.

        The name of the archive file that the Userfiles will be compressed into when downloading.  # noqa: E501

        :param specified_filename: The specified_filename of this MultiUserfilesModReq.  # noqa: E501
        :type: str
        """

        self._specified_filename = specified_filename

    @property
    def operation(self):
        """Gets the operation of this MultiUserfilesModReq.  # noqa: E501

        Used when affecting the synchronization status of files. Either \"sync_local\" or \"all_newer\". \"sync_local\" will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \"all_newer\" will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider.  # noqa: E501

        :return: The operation of this MultiUserfilesModReq.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this MultiUserfilesModReq.

        Used when affecting the synchronization status of files. Either \"sync_local\" or \"all_newer\". \"sync_local\" will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \"all_newer\" will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider.  # noqa: E501

        :param operation: The operation of this MultiUserfilesModReq.  # noqa: E501
        :type: str
        """

        self._operation = operation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultiUserfilesModReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiUserfilesModReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MultiUserfilesModReq):
            return True

        return self.to_dict() != other.to_dict()
