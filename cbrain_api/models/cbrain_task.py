# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cbrain_api.configuration import Configuration


class CbrainTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'user_id': 'int',
        'group_id': 'int',
        'bourreau_id': 'int',
        'tool_config_id': 'int',
        'batch_id': 'int',
        'params': 'object',
        'status': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'run_number': 'int',
        'results_data_provider_id': 'int',
        'cluster_workdir_size': 'int',
        'workdir_archived': 'str',
        'workdir_archive_userfile_id': 'int',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'user_id': 'user_id',
        'group_id': 'group_id',
        'bourreau_id': 'bourreau_id',
        'tool_config_id': 'tool_config_id',
        'batch_id': 'batch_id',
        'params': 'params',
        'status': 'status',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'run_number': 'run_number',
        'results_data_provider_id': 'results_data_provider_id',
        'cluster_workdir_size': 'cluster_workdir_size',
        'workdir_archived': 'workdir_archived',
        'workdir_archive_userfile_id': 'workdir_archive_userfile_id',
        'description': 'description'
    }

    def __init__(self, id=None, type=None, user_id=None, group_id=None, bourreau_id=None, tool_config_id=None, batch_id=None, params=None, status=None, created_at=None, updated_at=None, run_number=None, results_data_provider_id=None, cluster_workdir_size=None, workdir_archived=None, workdir_archive_userfile_id=None, description=None, _configuration=None):  # noqa: E501
        """CbrainTask - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._user_id = None
        self._group_id = None
        self._bourreau_id = None
        self._tool_config_id = None
        self._batch_id = None
        self._params = None
        self._status = None
        self._created_at = None
        self._updated_at = None
        self._run_number = None
        self._results_data_provider_id = None
        self._cluster_workdir_size = None
        self._workdir_archived = None
        self._workdir_archive_userfile_id = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if user_id is not None:
            self.user_id = user_id
        if group_id is not None:
            self.group_id = group_id
        if bourreau_id is not None:
            self.bourreau_id = bourreau_id
        if tool_config_id is not None:
            self.tool_config_id = tool_config_id
        if batch_id is not None:
            self.batch_id = batch_id
        if params is not None:
            self.params = params
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if run_number is not None:
            self.run_number = run_number
        if results_data_provider_id is not None:
            self.results_data_provider_id = results_data_provider_id
        if cluster_workdir_size is not None:
            self.cluster_workdir_size = cluster_workdir_size
        if workdir_archived is not None:
            self.workdir_archived = workdir_archived
        if workdir_archive_userfile_id is not None:
            self.workdir_archive_userfile_id = workdir_archive_userfile_id
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this CbrainTask.  # noqa: E501

        Unique identifier for the Task.  # noqa: E501

        :return: The id of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CbrainTask.

        Unique identifier for the Task.  # noqa: E501

        :param id: The id of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CbrainTask.  # noqa: E501

        The task type  # noqa: E501

        :return: The type of this CbrainTask.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CbrainTask.

        The task type  # noqa: E501

        :param type: The type of this CbrainTask.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this CbrainTask.  # noqa: E501

        ID of the User who created the Task.  # noqa: E501

        :return: The user_id of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CbrainTask.

        ID of the User who created the Task.  # noqa: E501

        :param user_id: The user_id of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def group_id(self):
        """Gets the group_id of this CbrainTask.  # noqa: E501

        ID of the group that this task is being run in.  # noqa: E501

        :return: The group_id of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CbrainTask.

        ID of the group that this task is being run in.  # noqa: E501

        :param group_id: The group_id of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def bourreau_id(self):
        """Gets the bourreau_id of this CbrainTask.  # noqa: E501

        ID of the Bourreau the Task was launched on.  # noqa: E501

        :return: The bourreau_id of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._bourreau_id

    @bourreau_id.setter
    def bourreau_id(self, bourreau_id):
        """Sets the bourreau_id of this CbrainTask.

        ID of the Bourreau the Task was launched on.  # noqa: E501

        :param bourreau_id: The bourreau_id of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._bourreau_id = bourreau_id

    @property
    def tool_config_id(self):
        """Gets the tool_config_id of this CbrainTask.  # noqa: E501

        ID number that specifies which Tool Config to use. The Tool Config specifies environment variables and other system-specific scripts necessary for the Task to be run in the target environment.  # noqa: E501

        :return: The tool_config_id of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._tool_config_id

    @tool_config_id.setter
    def tool_config_id(self, tool_config_id):
        """Sets the tool_config_id of this CbrainTask.

        ID number that specifies which Tool Config to use. The Tool Config specifies environment variables and other system-specific scripts necessary for the Task to be run in the target environment.  # noqa: E501

        :param tool_config_id: The tool_config_id of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._tool_config_id = tool_config_id

    @property
    def batch_id(self):
        """Gets the batch_id of this CbrainTask.  # noqa: E501

        ID of the batch this task was launched as part of. Batches of tasks consist of the same task, with the same parameters, being run on many different input files.  # noqa: E501

        :return: The batch_id of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this CbrainTask.

        ID of the batch this task was launched as part of. Batches of tasks consist of the same task, with the same parameters, being run on many different input files.  # noqa: E501

        :param batch_id: The batch_id of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._batch_id = batch_id

    @property
    def params(self):
        """Gets the params of this CbrainTask.  # noqa: E501

        Parameters used as inputs to the scientific calculation associated with the task.  # noqa: E501

        :return: The params of this CbrainTask.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this CbrainTask.

        Parameters used as inputs to the scientific calculation associated with the task.  # noqa: E501

        :param params: The params of this CbrainTask.  # noqa: E501
        :type: object
        """

        self._params = params

    @property
    def status(self):
        """Gets the status of this CbrainTask.  # noqa: E501

        Current status of the task.  # noqa: E501

        :return: The status of this CbrainTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CbrainTask.

        Current status of the task.  # noqa: E501

        :param status: The status of this CbrainTask.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this CbrainTask.  # noqa: E501

        Date created.  # noqa: E501

        :return: The created_at of this CbrainTask.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CbrainTask.

        Date created.  # noqa: E501

        :param created_at: The created_at of this CbrainTask.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CbrainTask.  # noqa: E501

        Last updated.  # noqa: E501

        :return: The updated_at of this CbrainTask.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CbrainTask.

        Last updated.  # noqa: E501

        :param updated_at: The updated_at of this CbrainTask.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def run_number(self):
        """Gets the run_number of this CbrainTask.  # noqa: E501

        The number of times that this task was run.  # noqa: E501

        :return: The run_number of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._run_number

    @run_number.setter
    def run_number(self, run_number):
        """Sets the run_number of this CbrainTask.

        The number of times that this task was run.  # noqa: E501

        :param run_number: The run_number of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._run_number = run_number

    @property
    def results_data_provider_id(self):
        """Gets the results_data_provider_id of this CbrainTask.  # noqa: E501

        ID of the Data Provider that contains the Userfile that represents the results of the task.  # noqa: E501

        :return: The results_data_provider_id of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._results_data_provider_id

    @results_data_provider_id.setter
    def results_data_provider_id(self, results_data_provider_id):
        """Sets the results_data_provider_id of this CbrainTask.

        ID of the Data Provider that contains the Userfile that represents the results of the task.  # noqa: E501

        :param results_data_provider_id: The results_data_provider_id of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._results_data_provider_id = results_data_provider_id

    @property
    def cluster_workdir_size(self):
        """Gets the cluster_workdir_size of this CbrainTask.  # noqa: E501

        size of workdirectory  # noqa: E501

        :return: The cluster_workdir_size of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._cluster_workdir_size

    @cluster_workdir_size.setter
    def cluster_workdir_size(self, cluster_workdir_size):
        """Sets the cluster_workdir_size of this CbrainTask.

        size of workdirectory  # noqa: E501

        :param cluster_workdir_size: The cluster_workdir_size of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._cluster_workdir_size = cluster_workdir_size

    @property
    def workdir_archived(self):
        """Gets the workdir_archived of this CbrainTask.  # noqa: E501

        Boolean variable that indicates whether the working directory of the task is available on the processing server or has been archived and is no longer accessible.  # noqa: E501

        :return: The workdir_archived of this CbrainTask.  # noqa: E501
        :rtype: str
        """
        return self._workdir_archived

    @workdir_archived.setter
    def workdir_archived(self, workdir_archived):
        """Sets the workdir_archived of this CbrainTask.

        Boolean variable that indicates whether the working directory of the task is available on the processing server or has been archived and is no longer accessible.  # noqa: E501

        :param workdir_archived: The workdir_archived of this CbrainTask.  # noqa: E501
        :type: str
        """

        self._workdir_archived = workdir_archived

    @property
    def workdir_archive_userfile_id(self):
        """Gets the workdir_archive_userfile_id of this CbrainTask.  # noqa: E501

        ID of the userfile created as part of the archival process, if the working directory of the task has been archived.  # noqa: E501

        :return: The workdir_archive_userfile_id of this CbrainTask.  # noqa: E501
        :rtype: int
        """
        return self._workdir_archive_userfile_id

    @workdir_archive_userfile_id.setter
    def workdir_archive_userfile_id(self, workdir_archive_userfile_id):
        """Sets the workdir_archive_userfile_id of this CbrainTask.

        ID of the userfile created as part of the archival process, if the working directory of the task has been archived.  # noqa: E501

        :param workdir_archive_userfile_id: The workdir_archive_userfile_id of this CbrainTask.  # noqa: E501
        :type: int
        """

        self._workdir_archive_userfile_id = workdir_archive_userfile_id

    @property
    def description(self):
        """Gets the description of this CbrainTask.  # noqa: E501

        Description of the Task.  # noqa: E501

        :return: The description of this CbrainTask.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CbrainTask.

        Description of the Task.  # noqa: E501

        :param description: The description of this CbrainTask.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CbrainTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CbrainTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CbrainTask):
            return True

        return self.to_dict() != other.to_dict()
