# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cbrain_api.configuration import Configuration


class Userfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'size': 'int',
        'user_id': 'int',
        'parent_id': 'int',
        'type': 'str',
        'group_id': 'int',
        'data_provider_id': 'int',
        'group_writable': 'str',
        'num_files': 'int',
        'hidden': 'str',
        'immutable': 'str',
        'archived': 'str',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'size': 'size',
        'user_id': 'user_id',
        'parent_id': 'parent_id',
        'type': 'type',
        'group_id': 'group_id',
        'data_provider_id': 'data_provider_id',
        'group_writable': 'group_writable',
        'num_files': 'num_files',
        'hidden': 'hidden',
        'immutable': 'immutable',
        'archived': 'archived',
        'description': 'description'
    }

    def __init__(self, id=None, name=None, size=None, user_id=None, parent_id=None, type=None, group_id=None, data_provider_id=None, group_writable=None, num_files=None, hidden=None, immutable=None, archived=None, description=None, _configuration=None):  # noqa: E501
        """Userfile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._size = None
        self._user_id = None
        self._parent_id = None
        self._type = None
        self._group_id = None
        self._data_provider_id = None
        self._group_writable = None
        self._num_files = None
        self._hidden = None
        self._immutable = None
        self._archived = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if user_id is not None:
            self.user_id = user_id
        if parent_id is not None:
            self.parent_id = parent_id
        if type is not None:
            self.type = type
        if group_id is not None:
            self.group_id = group_id
        if data_provider_id is not None:
            self.data_provider_id = data_provider_id
        if group_writable is not None:
            self.group_writable = group_writable
        if num_files is not None:
            self.num_files = num_files
        if hidden is not None:
            self.hidden = hidden
        if immutable is not None:
            self.immutable = immutable
        if archived is not None:
            self.archived = archived
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this Userfile.  # noqa: E501

        ID number of the file.  # noqa: E501

        :return: The id of this Userfile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Userfile.

        ID number of the file.  # noqa: E501

        :param id: The id of this Userfile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Userfile.  # noqa: E501

        Name of the file that the Userfile represents  # noqa: E501

        :return: The name of this Userfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Userfile.

        Name of the file that the Userfile represents  # noqa: E501

        :param name: The name of this Userfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this Userfile.  # noqa: E501

        Number of bytes used to store the file.  # noqa: E501

        :return: The size of this Userfile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Userfile.

        Number of bytes used to store the file.  # noqa: E501

        :param size: The size of this Userfile.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def user_id(self):
        """Gets the user_id of this Userfile.  # noqa: E501

        ID of the owner of the file.  # noqa: E501

        :return: The user_id of this Userfile.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Userfile.

        ID of the owner of the file.  # noqa: E501

        :param user_id: The user_id of this Userfile.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Userfile.  # noqa: E501

        ID of the parent Userfile, if any exists, or null otherwise.  # noqa: E501

        :return: The parent_id of this Userfile.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Userfile.

        ID of the parent Userfile, if any exists, or null otherwise.  # noqa: E501

        :param parent_id: The parent_id of this Userfile.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def type(self):
        """Gets the type of this Userfile.  # noqa: E501

        Type of the file. This is important in determining what tools can be run on the file. The most generic file types, are the Single File, which represents one file, and the File Collection, which represents a directory full of files.  # noqa: E501

        :return: The type of this Userfile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Userfile.

        Type of the file. This is important in determining what tools can be run on the file. The most generic file types, are the Single File, which represents one file, and the File Collection, which represents a directory full of files.  # noqa: E501

        :param type: The type of this Userfile.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def group_id(self):
        """Gets the group_id of this Userfile.  # noqa: E501

        ID of the group that owns the file, which determines its visibility status.  # noqa: E501

        :return: The group_id of this Userfile.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Userfile.

        ID of the group that owns the file, which determines its visibility status.  # noqa: E501

        :param group_id: The group_id of this Userfile.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def data_provider_id(self):
        """Gets the data_provider_id of this Userfile.  # noqa: E501

        ID of the Data Provider that is hosting the persistent copy of the file. It may exist in caches across the systems that make up CBRAIN, as copies of the file are made in order to run scientific programs on them on remote systems.  # noqa: E501

        :return: The data_provider_id of this Userfile.  # noqa: E501
        :rtype: int
        """
        return self._data_provider_id

    @data_provider_id.setter
    def data_provider_id(self, data_provider_id):
        """Sets the data_provider_id of this Userfile.

        ID of the Data Provider that is hosting the persistent copy of the file. It may exist in caches across the systems that make up CBRAIN, as copies of the file are made in order to run scientific programs on them on remote systems.  # noqa: E501

        :param data_provider_id: The data_provider_id of this Userfile.  # noqa: E501
        :type: int
        """

        self._data_provider_id = data_provider_id

    @property
    def group_writable(self):
        """Gets the group_writable of this Userfile.  # noqa: E501

        Boolean variable that specifies whether members of the owner group have access to modify or overwrite the file.  # noqa: E501

        :return: The group_writable of this Userfile.  # noqa: E501
        :rtype: str
        """
        return self._group_writable

    @group_writable.setter
    def group_writable(self, group_writable):
        """Sets the group_writable of this Userfile.

        Boolean variable that specifies whether members of the owner group have access to modify or overwrite the file.  # noqa: E501

        :param group_writable: The group_writable of this Userfile.  # noqa: E501
        :type: str
        """

        self._group_writable = group_writable

    @property
    def num_files(self):
        """Gets the num_files of this Userfile.  # noqa: E501

        Number of files that the Userfiles represents. For Single Files, this is always 1.  # noqa: E501

        :return: The num_files of this Userfile.  # noqa: E501
        :rtype: int
        """
        return self._num_files

    @num_files.setter
    def num_files(self, num_files):
        """Sets the num_files of this Userfile.

        Number of files that the Userfiles represents. For Single Files, this is always 1.  # noqa: E501

        :param num_files: The num_files of this Userfile.  # noqa: E501
        :type: int
        """

        self._num_files = num_files

    @property
    def hidden(self):
        """Gets the hidden of this Userfile.  # noqa: E501

        Boolean variable that specifies whether this file is hidden or not in the user interface.  # noqa: E501

        :return: The hidden of this Userfile.  # noqa: E501
        :rtype: str
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Userfile.

        Boolean variable that specifies whether this file is hidden or not in the user interface.  # noqa: E501

        :param hidden: The hidden of this Userfile.  # noqa: E501
        :type: str
        """

        self._hidden = hidden

    @property
    def immutable(self):
        """Gets the immutable of this Userfile.  # noqa: E501

        Boolean variable that specifies whether any user can modify the contents of the file.  # noqa: E501

        :return: The immutable of this Userfile.  # noqa: E501
        :rtype: str
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this Userfile.

        Boolean variable that specifies whether any user can modify the contents of the file.  # noqa: E501

        :param immutable: The immutable of this Userfile.  # noqa: E501
        :type: str
        """

        self._immutable = immutable

    @property
    def archived(self):
        """Gets the archived of this Userfile.  # noqa: E501

        Boolean variable that specifies whether the file is available, uncompressed, or has been archived.  # noqa: E501

        :return: The archived of this Userfile.  # noqa: E501
        :rtype: str
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Userfile.

        Boolean variable that specifies whether the file is available, uncompressed, or has been archived.  # noqa: E501

        :param archived: The archived of this Userfile.  # noqa: E501
        :type: str
        """

        self._archived = archived

    @property
    def description(self):
        """Gets the description of this Userfile.  # noqa: E501

        Description of the file.  # noqa: E501

        :return: The description of this Userfile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Userfile.

        Description of the file.  # noqa: E501

        :param description: The description of this Userfile.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Userfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Userfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Userfile):
            return True

        return self.to_dict() != other.to_dict()
