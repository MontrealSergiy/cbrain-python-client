# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cbrain_api.configuration import Configuration


class UserModReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'User',
        'no_password_reset_needed': 'int',
        'force_password_reset': 'bool'
    }

    attribute_map = {
        'user': 'user',
        'no_password_reset_needed': 'no_password_reset_needed',
        'force_password_reset': 'force_password_reset'
    }

    def __init__(self, user=None, no_password_reset_needed=None, force_password_reset=None, _configuration=None):  # noqa: E501
        """UserModReq - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user = None
        self._no_password_reset_needed = None
        self._force_password_reset = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if no_password_reset_needed is not None:
            self.no_password_reset_needed = no_password_reset_needed
        if force_password_reset is not None:
            self.force_password_reset = force_password_reset

    @property
    def user(self):
        """Gets the user of this UserModReq.  # noqa: E501


        :return: The user of this UserModReq.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserModReq.


        :param user: The user of this UserModReq.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def no_password_reset_needed(self):
        """Gets the no_password_reset_needed of this UserModReq.  # noqa: E501

        For new user accounts, the user must reset the password at first login  # noqa: E501

        :return: The no_password_reset_needed of this UserModReq.  # noqa: E501
        :rtype: int
        """
        return self._no_password_reset_needed

    @no_password_reset_needed.setter
    def no_password_reset_needed(self, no_password_reset_needed):
        """Sets the no_password_reset_needed of this UserModReq.

        For new user accounts, the user must reset the password at first login  # noqa: E501

        :param no_password_reset_needed: The no_password_reset_needed of this UserModReq.  # noqa: E501
        :type: int
        """

        self._no_password_reset_needed = no_password_reset_needed

    @property
    def force_password_reset(self):
        """Gets the force_password_reset of this UserModReq.  # noqa: E501

        For existing accounts, boolean to force a password change  # noqa: E501

        :return: The force_password_reset of this UserModReq.  # noqa: E501
        :rtype: bool
        """
        return self._force_password_reset

    @force_password_reset.setter
    def force_password_reset(self, force_password_reset):
        """Sets the force_password_reset of this UserModReq.

        For existing accounts, boolean to force a password change  # noqa: E501

        :param force_password_reset: The force_password_reset of this UserModReq.  # noqa: E501
        :type: bool
        """

        self._force_password_reset = force_password_reset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserModReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserModReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserModReq):
            return True

        return self.to_dict() != other.to_dict()
