# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cbrain_api.configuration import Configuration


class MultiRegistrationModReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basenames': 'list[str]',
        'filetypes': 'list[str]',
        'as_user_id': 'int',
        'browse_path': 'str',
        'other_group_id': 'int',
        'delete': 'bool'
    }

    attribute_map = {
        'basenames': 'basenames',
        'filetypes': 'filetypes',
        'as_user_id': 'as_user_id',
        'browse_path': 'browse_path',
        'other_group_id': 'other_group_id',
        'delete': 'delete'
    }

    def __init__(self, basenames=None, filetypes=None, as_user_id=None, browse_path=None, other_group_id=None, delete=False, _configuration=None):  # noqa: E501
        """MultiRegistrationModReq - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._basenames = None
        self._filetypes = None
        self._as_user_id = None
        self._browse_path = None
        self._other_group_id = None
        self._delete = None
        self.discriminator = None

        if basenames is not None:
            self.basenames = basenames
        if filetypes is not None:
            self.filetypes = filetypes
        if as_user_id is not None:
            self.as_user_id = as_user_id
        if browse_path is not None:
            self.browse_path = browse_path
        if other_group_id is not None:
            self.other_group_id = other_group_id
        if delete is not None:
            self.delete = delete

    @property
    def basenames(self):
        """Gets the basenames of this MultiRegistrationModReq.  # noqa: E501


        :return: The basenames of this MultiRegistrationModReq.  # noqa: E501
        :rtype: list[str]
        """
        return self._basenames

    @basenames.setter
    def basenames(self, basenames):
        """Sets the basenames of this MultiRegistrationModReq.


        :param basenames: The basenames of this MultiRegistrationModReq.  # noqa: E501
        :type: list[str]
        """

        self._basenames = basenames

    @property
    def filetypes(self):
        """Gets the filetypes of this MultiRegistrationModReq.  # noqa: E501

        An array containing the filetypes associated with the files to register; each element must be a string containing the cbrain file type, a single dash, and then a repeat of the basename found in the basenames parameters. For example, \"TextFile-abc.txt\"  # noqa: E501

        :return: The filetypes of this MultiRegistrationModReq.  # noqa: E501
        :rtype: list[str]
        """
        return self._filetypes

    @filetypes.setter
    def filetypes(self, filetypes):
        """Sets the filetypes of this MultiRegistrationModReq.

        An array containing the filetypes associated with the files to register; each element must be a string containing the cbrain file type, a single dash, and then a repeat of the basename found in the basenames parameters. For example, \"TextFile-abc.txt\"  # noqa: E501

        :param filetypes: The filetypes of this MultiRegistrationModReq.  # noqa: E501
        :type: list[str]
        """

        self._filetypes = filetypes

    @property
    def as_user_id(self):
        """Gets the as_user_id of this MultiRegistrationModReq.  # noqa: E501

        The ID of the user to register files as.  # noqa: E501

        :return: The as_user_id of this MultiRegistrationModReq.  # noqa: E501
        :rtype: int
        """
        return self._as_user_id

    @as_user_id.setter
    def as_user_id(self, as_user_id):
        """Sets the as_user_id of this MultiRegistrationModReq.

        The ID of the user to register files as.  # noqa: E501

        :param as_user_id: The as_user_id of this MultiRegistrationModReq.  # noqa: E501
        :type: int
        """

        self._as_user_id = as_user_id

    @property
    def browse_path(self):
        """Gets the browse_path of this MultiRegistrationModReq.  # noqa: E501

        A relative path such as \"abcd/efgh\" that can be provided when registering basenames deeper under the root of the DataProvider. This parameter only works for DataProvider types that have a 'multi-level' capability. Otherwise the string is ignored. The relative path will be used for all basenames in the current request.  # noqa: E501

        :return: The browse_path of this MultiRegistrationModReq.  # noqa: E501
        :rtype: str
        """
        return self._browse_path

    @browse_path.setter
    def browse_path(self, browse_path):
        """Sets the browse_path of this MultiRegistrationModReq.

        A relative path such as \"abcd/efgh\" that can be provided when registering basenames deeper under the root of the DataProvider. This parameter only works for DataProvider types that have a 'multi-level' capability. Otherwise the string is ignored. The relative path will be used for all basenames in the current request.  # noqa: E501

        :param browse_path: The browse_path of this MultiRegistrationModReq.  # noqa: E501
        :type: str
        """

        self._browse_path = browse_path

    @property
    def other_group_id(self):
        """Gets the other_group_id of this MultiRegistrationModReq.  # noqa: E501

        The ID of the project controlling access to the registered files.  # noqa: E501

        :return: The other_group_id of this MultiRegistrationModReq.  # noqa: E501
        :rtype: int
        """
        return self._other_group_id

    @other_group_id.setter
    def other_group_id(self, other_group_id):
        """Sets the other_group_id of this MultiRegistrationModReq.

        The ID of the project controlling access to the registered files.  # noqa: E501

        :param other_group_id: The other_group_id of this MultiRegistrationModReq.  # noqa: E501
        :type: int
        """

        self._other_group_id = other_group_id

    @property
    def delete(self):
        """Gets the delete of this MultiRegistrationModReq.  # noqa: E501

        Specifies to delete the file contents. This is only used during an \"unregister\" action.  # noqa: E501

        :return: The delete of this MultiRegistrationModReq.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this MultiRegistrationModReq.

        Specifies to delete the file contents. This is only used during an \"unregister\" action.  # noqa: E501

        :param delete: The delete of this MultiRegistrationModReq.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultiRegistrationModReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiRegistrationModReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MultiRegistrationModReq):
            return True

        return self.to_dict() != other.to_dict()
