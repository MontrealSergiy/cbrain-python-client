# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cbrain_api.configuration import Configuration


class DataProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'user_id': 'int',
        'group_id': 'int',
        'online': 'str',
        'read_only': 'str',
        'description': 'str',
        'is_browsable': 'str',
        'is_fast_syncing': 'str',
        'allow_file_owner_change': 'str',
        'content_storage_shared_between_users': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'user_id': 'user_id',
        'group_id': 'group_id',
        'online': 'online',
        'read_only': 'read_only',
        'description': 'description',
        'is_browsable': 'is_browsable',
        'is_fast_syncing': 'is_fast_syncing',
        'allow_file_owner_change': 'allow_file_owner_change',
        'content_storage_shared_between_users': 'content_storage_shared_between_users'
    }

    def __init__(self, id=None, name=None, type=None, user_id=None, group_id=None, online=None, read_only=None, description=None, is_browsable=None, is_fast_syncing=None, allow_file_owner_change=None, content_storage_shared_between_users=None, _configuration=None):  # noqa: E501
        """DataProvider - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._type = None
        self._user_id = None
        self._group_id = None
        self._online = None
        self._read_only = None
        self._description = None
        self._is_browsable = None
        self._is_fast_syncing = None
        self._allow_file_owner_change = None
        self._content_storage_shared_between_users = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if user_id is not None:
            self.user_id = user_id
        if group_id is not None:
            self.group_id = group_id
        if online is not None:
            self.online = online
        if read_only is not None:
            self.read_only = read_only
        if description is not None:
            self.description = description
        if is_browsable is not None:
            self.is_browsable = is_browsable
        if is_fast_syncing is not None:
            self.is_fast_syncing = is_fast_syncing
        if allow_file_owner_change is not None:
            self.allow_file_owner_change = allow_file_owner_change
        if content_storage_shared_between_users is not None:
            self.content_storage_shared_between_users = content_storage_shared_between_users

    @property
    def id(self):
        """Gets the id of this DataProvider.  # noqa: E501

        Unique ID for the Data Provider.  # noqa: E501

        :return: The id of this DataProvider.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataProvider.

        Unique ID for the Data Provider.  # noqa: E501

        :param id: The id of this DataProvider.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataProvider.  # noqa: E501

        Name of the Data Provider.  # noqa: E501

        :return: The name of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataProvider.

        Name of the Data Provider.  # noqa: E501

        :param name: The name of this DataProvider.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DataProvider.  # noqa: E501

        Type of Data Provider, which usually indicates whether it is a local Data Provider, has a flat internal directory structure, or is meant for file uploading to CBRAIN.  # noqa: E501

        :return: The type of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataProvider.

        Type of Data Provider, which usually indicates whether it is a local Data Provider, has a flat internal directory structure, or is meant for file uploading to CBRAIN.  # noqa: E501

        :param type: The type of this DataProvider.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this DataProvider.  # noqa: E501

        Creator and owner of the Data Provider.  # noqa: E501

        :return: The user_id of this DataProvider.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataProvider.

        Creator and owner of the Data Provider.  # noqa: E501

        :param user_id: The user_id of this DataProvider.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def group_id(self):
        """Gets the group_id of this DataProvider.  # noqa: E501

        ID of the group that has access to this Data Provider.  # noqa: E501

        :return: The group_id of this DataProvider.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DataProvider.

        ID of the group that has access to this Data Provider.  # noqa: E501

        :param group_id: The group_id of this DataProvider.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def online(self):
        """Gets the online of this DataProvider.  # noqa: E501

        Boolean variable that indicates whether the system hosting the Data Provider is accessible.  # noqa: E501

        :return: The online of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this DataProvider.

        Boolean variable that indicates whether the system hosting the Data Provider is accessible.  # noqa: E501

        :param online: The online of this DataProvider.  # noqa: E501
        :type: str
        """

        self._online = online

    @property
    def read_only(self):
        """Gets the read_only of this DataProvider.  # noqa: E501

        Boolean variable that indicates whether the Data Provider can be written to.  # noqa: E501

        :return: The read_only of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this DataProvider.

        Boolean variable that indicates whether the Data Provider can be written to.  # noqa: E501

        :param read_only: The read_only of this DataProvider.  # noqa: E501
        :type: str
        """

        self._read_only = read_only

    @property
    def description(self):
        """Gets the description of this DataProvider.  # noqa: E501

        Description of the Data Provider.  # noqa: E501

        :return: The description of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataProvider.

        Description of the Data Provider.  # noqa: E501

        :param description: The description of this DataProvider.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_browsable(self):
        """Gets the is_browsable of this DataProvider.  # noqa: E501


        :return: The is_browsable of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._is_browsable

    @is_browsable.setter
    def is_browsable(self, is_browsable):
        """Sets the is_browsable of this DataProvider.


        :param is_browsable: The is_browsable of this DataProvider.  # noqa: E501
        :type: str
        """

        self._is_browsable = is_browsable

    @property
    def is_fast_syncing(self):
        """Gets the is_fast_syncing of this DataProvider.  # noqa: E501


        :return: The is_fast_syncing of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._is_fast_syncing

    @is_fast_syncing.setter
    def is_fast_syncing(self, is_fast_syncing):
        """Sets the is_fast_syncing of this DataProvider.


        :param is_fast_syncing: The is_fast_syncing of this DataProvider.  # noqa: E501
        :type: str
        """

        self._is_fast_syncing = is_fast_syncing

    @property
    def allow_file_owner_change(self):
        """Gets the allow_file_owner_change of this DataProvider.  # noqa: E501


        :return: The allow_file_owner_change of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._allow_file_owner_change

    @allow_file_owner_change.setter
    def allow_file_owner_change(self, allow_file_owner_change):
        """Sets the allow_file_owner_change of this DataProvider.


        :param allow_file_owner_change: The allow_file_owner_change of this DataProvider.  # noqa: E501
        :type: str
        """

        self._allow_file_owner_change = allow_file_owner_change

    @property
    def content_storage_shared_between_users(self):
        """Gets the content_storage_shared_between_users of this DataProvider.  # noqa: E501


        :return: The content_storage_shared_between_users of this DataProvider.  # noqa: E501
        :rtype: str
        """
        return self._content_storage_shared_between_users

    @content_storage_shared_between_users.setter
    def content_storage_shared_between_users(self, content_storage_shared_between_users):
        """Sets the content_storage_shared_between_users of this DataProvider.


        :param content_storage_shared_between_users: The content_storage_shared_between_users of this DataProvider.  # noqa: E501
        :type: str
        """

        self._content_storage_shared_between_users = content_storage_shared_between_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataProvider):
            return True

        return self.to_dict() != other.to_dict()
