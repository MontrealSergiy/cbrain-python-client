# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform  # noqa: E501

    OpenAPI spec version: 6.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cbrain_api.configuration import Configuration


class FileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userfile_id': 'int',
        'name': 'str',
        'group': 'str',
        'gid': 'int',
        'owner': 'str',
        'uid': 'int',
        'permissions': 'int',
        'size': 'int',
        'state_ok': 'bool',
        'message': 'str',
        'symbolic_type': 'str',
        'atime': 'int',
        'mtime': 'int'
    }

    attribute_map = {
        'userfile_id': 'userfile_id',
        'name': 'name',
        'group': 'group',
        'gid': 'gid',
        'owner': 'owner',
        'uid': 'uid',
        'permissions': 'permissions',
        'size': 'size',
        'state_ok': 'state_ok',
        'message': 'message',
        'symbolic_type': 'symbolic_type',
        'atime': 'atime',
        'mtime': 'mtime'
    }

    def __init__(self, userfile_id=None, name=None, group=None, gid=None, owner=None, uid=None, permissions=None, size=None, state_ok=None, message=None, symbolic_type=None, atime=None, mtime=None, _configuration=None):  # noqa: E501
        """FileInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._userfile_id = None
        self._name = None
        self._group = None
        self._gid = None
        self._owner = None
        self._uid = None
        self._permissions = None
        self._size = None
        self._state_ok = None
        self._message = None
        self._symbolic_type = None
        self._atime = None
        self._mtime = None
        self.discriminator = None

        if userfile_id is not None:
            self.userfile_id = userfile_id
        if name is not None:
            self.name = name
        if group is not None:
            self.group = group
        if gid is not None:
            self.gid = gid
        if owner is not None:
            self.owner = owner
        if uid is not None:
            self.uid = uid
        if permissions is not None:
            self.permissions = permissions
        if size is not None:
            self.size = size
        if state_ok is not None:
            self.state_ok = state_ok
        if message is not None:
            self.message = message
        if symbolic_type is not None:
            self.symbolic_type = symbolic_type
        if atime is not None:
            self.atime = atime
        if mtime is not None:
            self.mtime = mtime

    @property
    def userfile_id(self):
        """Gets the userfile_id of this FileInfo.  # noqa: E501

        id of the userfile  # noqa: E501

        :return: The userfile_id of this FileInfo.  # noqa: E501
        :rtype: int
        """
        return self._userfile_id

    @userfile_id.setter
    def userfile_id(self, userfile_id):
        """Sets the userfile_id of this FileInfo.

        id of the userfile  # noqa: E501

        :param userfile_id: The userfile_id of this FileInfo.  # noqa: E501
        :type: int
        """

        self._userfile_id = userfile_id

    @property
    def name(self):
        """Gets the name of this FileInfo.  # noqa: E501

        the base filename  # noqa: E501

        :return: The name of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileInfo.

        the base filename  # noqa: E501

        :param name: The name of this FileInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def group(self):
        """Gets the group of this FileInfo.  # noqa: E501

        string representation of gid, the name of the group  # noqa: E501

        :return: The group of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FileInfo.

        string representation of gid, the name of the group  # noqa: E501

        :param group: The group of this FileInfo.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def gid(self):
        """Gets the gid of this FileInfo.  # noqa: E501

        numeric group id of the file  # noqa: E501

        :return: The gid of this FileInfo.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this FileInfo.

        numeric group id of the file  # noqa: E501

        :param gid: The gid of this FileInfo.  # noqa: E501
        :type: int
        """

        self._gid = gid

    @property
    def owner(self):
        """Gets the owner of this FileInfo.  # noqa: E501

        string representation of uid, the name of the owner  # noqa: E501

        :return: The owner of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this FileInfo.

        string representation of uid, the name of the owner  # noqa: E501

        :param owner: The owner of this FileInfo.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def uid(self):
        """Gets the uid of this FileInfo.  # noqa: E501

        numeric uid of owner  # noqa: E501

        :return: The uid of this FileInfo.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this FileInfo.

        numeric uid of owner  # noqa: E501

        :param uid: The uid of this FileInfo.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def permissions(self):
        """Gets the permissions of this FileInfo.  # noqa: E501

        an int interpreted in octal, e.g. 0640  # noqa: E501

        :return: The permissions of this FileInfo.  # noqa: E501
        :rtype: int
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this FileInfo.

        an int interpreted in octal, e.g. 0640  # noqa: E501

        :param permissions: The permissions of this FileInfo.  # noqa: E501
        :type: int
        """

        self._permissions = permissions

    @property
    def size(self):
        """Gets the size of this FileInfo.  # noqa: E501

        size of file in bytes  # noqa: E501

        :return: The size of this FileInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileInfo.

        size of file in bytes  # noqa: E501

        :param size: The size of this FileInfo.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def state_ok(self):
        """Gets the state_ok of this FileInfo.  # noqa: E501

        flag that tell whether or not it is OK to register/unregister  # noqa: E501

        :return: The state_ok of this FileInfo.  # noqa: E501
        :rtype: bool
        """
        return self._state_ok

    @state_ok.setter
    def state_ok(self, state_ok):
        """Sets the state_ok of this FileInfo.

        flag that tell whether or not it is OK to register/unregister  # noqa: E501

        :param state_ok: The state_ok of this FileInfo.  # noqa: E501
        :type: bool
        """

        self._state_ok = state_ok

    @property
    def message(self):
        """Gets the message of this FileInfo.  # noqa: E501

        a message to give more information about the state_ok flag  # noqa: E501

        :return: The message of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this FileInfo.

        a message to give more information about the state_ok flag  # noqa: E501

        :param message: The message of this FileInfo.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def symbolic_type(self):
        """Gets the symbolic_type of this FileInfo.  # noqa: E501

        one of :regular, :symlink, :directory  # noqa: E501

        :return: The symbolic_type of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbolic_type

    @symbolic_type.setter
    def symbolic_type(self, symbolic_type):
        """Sets the symbolic_type of this FileInfo.

        one of :regular, :symlink, :directory  # noqa: E501

        :param symbolic_type: The symbolic_type of this FileInfo.  # noqa: E501
        :type: str
        """

        self._symbolic_type = symbolic_type

    @property
    def atime(self):
        """Gets the atime of this FileInfo.  # noqa: E501

        access time (an int, since Epoch)  # noqa: E501

        :return: The atime of this FileInfo.  # noqa: E501
        :rtype: int
        """
        return self._atime

    @atime.setter
    def atime(self, atime):
        """Sets the atime of this FileInfo.

        access time (an int, since Epoch)  # noqa: E501

        :param atime: The atime of this FileInfo.  # noqa: E501
        :type: int
        """

        self._atime = atime

    @property
    def mtime(self):
        """Gets the mtime of this FileInfo.  # noqa: E501

        modification time (an int, since Epoch)  # noqa: E501

        :return: The mtime of this FileInfo.  # noqa: E501
        :rtype: int
        """
        return self._mtime

    @mtime.setter
    def mtime(self, mtime):
        """Sets the mtime of this FileInfo.

        modification time (an int, since Epoch)  # noqa: E501

        :param mtime: The mtime of this FileInfo.  # noqa: E501
        :type: int
        """

        self._mtime = mtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileInfo):
            return True

        return self.to_dict() != other.to_dict()
